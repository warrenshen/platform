import unittest

from bespoke.date import date_util
from bespoke.metrc.common import metrc_common_util
from bespoke.metrc.common.metrc_common_util import (
	_get_date_str, SplitTimeBy
)

class TestFns(unittest.TestCase):

	def test_get_time_ranges_by_hour(self) -> None:
		cur_date = date_util.load_date_str('10/01/2020')
		actual_time_ranges = metrc_common_util._get_time_ranges(
			_get_date_str(cur_date), SplitTimeBy.HOUR)

		expected = [
			['2020-10-01T00:00:00', '2020-10-01T01:00:00'],
			['2020-10-01T01:00:00', '2020-10-01T02:00:00'],
			['2020-10-01T02:00:00', '2020-10-01T03:00:00'],
			['2020-10-01T03:00:00', '2020-10-01T04:00:00'],
			['2020-10-01T04:00:00', '2020-10-01T05:00:00'],
			['2020-10-01T05:00:00', '2020-10-01T06:00:00'],
			['2020-10-01T06:00:00', '2020-10-01T07:00:00'],
			['2020-10-01T07:00:00', '2020-10-01T08:00:00'],
			['2020-10-01T08:00:00', '2020-10-01T09:00:00'],
			['2020-10-01T09:00:00', '2020-10-01T10:00:00'],
			['2020-10-01T10:00:00', '2020-10-01T11:00:00'],
			['2020-10-01T11:00:00', '2020-10-01T12:00:00'],
			['2020-10-01T12:00:00', '2020-10-01T13:00:00'],
			['2020-10-01T13:00:00', '2020-10-01T14:00:00'],
			['2020-10-01T14:00:00', '2020-10-01T15:00:00'],
			['2020-10-01T15:00:00', '2020-10-01T16:00:00'],
			['2020-10-01T16:00:00', '2020-10-01T17:00:00'],
			['2020-10-01T17:00:00', '2020-10-01T18:00:00'],
			['2020-10-01T18:00:00', '2020-10-01T19:00:00'],
			['2020-10-01T19:00:00', '2020-10-01T20:00:00'],
			['2020-10-01T20:00:00', '2020-10-01T21:00:00'],
			['2020-10-01T21:00:00', '2020-10-01T22:00:00'],
			['2020-10-01T22:00:00', '2020-10-01T23:00:00'],
			['2020-10-01T23:00:00', '2020-10-02T00:00:00'],
		]

		self.assertEqual(expected, actual_time_ranges)

		cur_date = date_util.load_date_str('10/31/2020')
		actual_time_ranges = metrc_common_util._get_time_ranges(
			_get_date_str(cur_date), SplitTimeBy.HOUR)

		expected = [
			['2020-10-31T00:00:00', '2020-10-31T01:00:00'],
			['2020-10-31T01:00:00', '2020-10-31T02:00:00'],
			['2020-10-31T02:00:00', '2020-10-31T03:00:00'],
			['2020-10-31T03:00:00', '2020-10-31T04:00:00'],
			['2020-10-31T04:00:00', '2020-10-31T05:00:00'],
			['2020-10-31T05:00:00', '2020-10-31T06:00:00'],
			['2020-10-31T06:00:00', '2020-10-31T07:00:00'],
			['2020-10-31T07:00:00', '2020-10-31T08:00:00'],
			['2020-10-31T08:00:00', '2020-10-31T09:00:00'],
			['2020-10-31T09:00:00', '2020-10-31T10:00:00'],
			['2020-10-31T10:00:00', '2020-10-31T11:00:00'],
			['2020-10-31T11:00:00', '2020-10-31T12:00:00'],
			['2020-10-31T12:00:00', '2020-10-31T13:00:00'],
			['2020-10-31T13:00:00', '2020-10-31T14:00:00'],
			['2020-10-31T14:00:00', '2020-10-31T15:00:00'],
			['2020-10-31T15:00:00', '2020-10-31T16:00:00'],
			['2020-10-31T16:00:00', '2020-10-31T17:00:00'],
			['2020-10-31T17:00:00', '2020-10-31T18:00:00'],
			['2020-10-31T18:00:00', '2020-10-31T19:00:00'],
			['2020-10-31T19:00:00', '2020-10-31T20:00:00'],
			['2020-10-31T20:00:00', '2020-10-31T21:00:00'],
			['2020-10-31T21:00:00', '2020-10-31T22:00:00'],
			['2020-10-31T22:00:00', '2020-10-31T23:00:00'],
			['2020-10-31T23:00:00', '2020-11-01T00:00:00'],
		]

		self.assertEqual(expected, actual_time_ranges)

	def test_get_time_ranges_by_quarter_hour(self) -> None:
		cur_date = date_util.load_date_str('10/01/2020')
		actual_time_ranges = metrc_common_util._get_time_ranges(
			_get_date_str(cur_date), SplitTimeBy.QUARTER_HOUR)

		expected = [
			['2020-10-01T00:00:00', '2020-10-01T00:15:00'],
			['2020-10-01T00:15:00', '2020-10-01T00:30:00'],
			['2020-10-01T00:30:00', '2020-10-01T00:45:00'],
			['2020-10-01T00:45:00', '2020-10-01T01:00:00'],
			['2020-10-01T01:00:00', '2020-10-01T01:15:00'],
			['2020-10-01T01:15:00', '2020-10-01T01:30:00'],
			['2020-10-01T01:30:00', '2020-10-01T01:45:00'],
			['2020-10-01T01:45:00', '2020-10-01T02:00:00'],
			['2020-10-01T02:00:00', '2020-10-01T02:15:00'],
			['2020-10-01T02:15:00', '2020-10-01T02:30:00'],
			['2020-10-01T02:30:00', '2020-10-01T02:45:00'],
			['2020-10-01T02:45:00', '2020-10-01T03:00:00'],
			['2020-10-01T03:00:00', '2020-10-01T03:15:00'],
			['2020-10-01T03:15:00', '2020-10-01T03:30:00'],
			['2020-10-01T03:30:00', '2020-10-01T03:45:00'],
			['2020-10-01T03:45:00', '2020-10-01T04:00:00'],
			['2020-10-01T04:00:00', '2020-10-01T04:15:00'],
			['2020-10-01T04:15:00', '2020-10-01T04:30:00'],
			['2020-10-01T04:30:00', '2020-10-01T04:45:00'],
			['2020-10-01T04:45:00', '2020-10-01T05:00:00'],
			['2020-10-01T05:00:00', '2020-10-01T05:15:00'],
			['2020-10-01T05:15:00', '2020-10-01T05:30:00'],
			['2020-10-01T05:30:00', '2020-10-01T05:45:00'],
			['2020-10-01T05:45:00', '2020-10-01T06:00:00'],
			['2020-10-01T06:00:00', '2020-10-01T06:15:00'],
			['2020-10-01T06:15:00', '2020-10-01T06:30:00'],
			['2020-10-01T06:30:00', '2020-10-01T06:45:00'],
			['2020-10-01T06:45:00', '2020-10-01T07:00:00'],
			['2020-10-01T07:00:00', '2020-10-01T07:15:00'],
			['2020-10-01T07:15:00', '2020-10-01T07:30:00'],
			['2020-10-01T07:30:00', '2020-10-01T07:45:00'],
			['2020-10-01T07:45:00', '2020-10-01T08:00:00'],
			['2020-10-01T08:00:00', '2020-10-01T08:15:00'],
			['2020-10-01T08:15:00', '2020-10-01T08:30:00'],
			['2020-10-01T08:30:00', '2020-10-01T08:45:00'],
			['2020-10-01T08:45:00', '2020-10-01T09:00:00'],
			['2020-10-01T09:00:00', '2020-10-01T09:15:00'],
			['2020-10-01T09:15:00', '2020-10-01T09:30:00'],
			['2020-10-01T09:30:00', '2020-10-01T09:45:00'],
			['2020-10-01T09:45:00', '2020-10-01T10:00:00'],
			['2020-10-01T10:00:00', '2020-10-01T10:15:00'],
			['2020-10-01T10:15:00', '2020-10-01T10:30:00'],
			['2020-10-01T10:30:00', '2020-10-01T10:45:00'],
			['2020-10-01T10:45:00', '2020-10-01T11:00:00'],
			['2020-10-01T11:00:00', '2020-10-01T11:15:00'],
			['2020-10-01T11:15:00', '2020-10-01T11:30:00'],
			['2020-10-01T11:30:00', '2020-10-01T11:45:00'],
			['2020-10-01T11:45:00', '2020-10-01T12:00:00'],
			['2020-10-01T12:00:00', '2020-10-01T12:15:00'],
			['2020-10-01T12:15:00', '2020-10-01T12:30:00'],
			['2020-10-01T12:30:00', '2020-10-01T12:45:00'],
			['2020-10-01T12:45:00', '2020-10-01T13:00:00'],
			['2020-10-01T13:00:00', '2020-10-01T13:15:00'],
			['2020-10-01T13:15:00', '2020-10-01T13:30:00'],
			['2020-10-01T13:30:00', '2020-10-01T13:45:00'],
			['2020-10-01T13:45:00', '2020-10-01T14:00:00'],
			['2020-10-01T14:00:00', '2020-10-01T14:15:00'],
			['2020-10-01T14:15:00', '2020-10-01T14:30:00'],
			['2020-10-01T14:30:00', '2020-10-01T14:45:00'],
			['2020-10-01T14:45:00', '2020-10-01T15:00:00'],
			['2020-10-01T15:00:00', '2020-10-01T15:15:00'],
			['2020-10-01T15:15:00', '2020-10-01T15:30:00'],
			['2020-10-01T15:30:00', '2020-10-01T15:45:00'],
			['2020-10-01T15:45:00', '2020-10-01T16:00:00'],
			['2020-10-01T16:00:00', '2020-10-01T16:15:00'],
			['2020-10-01T16:15:00', '2020-10-01T16:30:00'],
			['2020-10-01T16:30:00', '2020-10-01T16:45:00'],
			['2020-10-01T16:45:00', '2020-10-01T17:00:00'],
			['2020-10-01T17:00:00', '2020-10-01T17:15:00'],
			['2020-10-01T17:15:00', '2020-10-01T17:30:00'],
			['2020-10-01T17:30:00', '2020-10-01T17:45:00'],
			['2020-10-01T17:45:00', '2020-10-01T18:00:00'],
			['2020-10-01T18:00:00', '2020-10-01T18:15:00'],
			['2020-10-01T18:15:00', '2020-10-01T18:30:00'],
			['2020-10-01T18:30:00', '2020-10-01T18:45:00'],
			['2020-10-01T18:45:00', '2020-10-01T19:00:00'],
			['2020-10-01T19:00:00', '2020-10-01T19:15:00'],
			['2020-10-01T19:15:00', '2020-10-01T19:30:00'],
			['2020-10-01T19:30:00', '2020-10-01T19:45:00'],
			['2020-10-01T19:45:00', '2020-10-01T20:00:00'],
			['2020-10-01T20:00:00', '2020-10-01T20:15:00'],
			['2020-10-01T20:15:00', '2020-10-01T20:30:00'],
			['2020-10-01T20:30:00', '2020-10-01T20:45:00'],
			['2020-10-01T20:45:00', '2020-10-01T21:00:00'],
			['2020-10-01T21:00:00', '2020-10-01T21:15:00'],
			['2020-10-01T21:15:00', '2020-10-01T21:30:00'],
			['2020-10-01T21:30:00', '2020-10-01T21:45:00'],
			['2020-10-01T21:45:00', '2020-10-01T22:00:00'],
			['2020-10-01T22:00:00', '2020-10-01T22:15:00'],
			['2020-10-01T22:15:00', '2020-10-01T22:30:00'],
			['2020-10-01T22:30:00', '2020-10-01T22:45:00'],
			['2020-10-01T22:45:00', '2020-10-01T23:00:00'],
			['2020-10-01T23:00:00', '2020-10-01T23:15:00'],
			['2020-10-01T23:15:00', '2020-10-01T23:30:00'],
			['2020-10-01T23:30:00', '2020-10-01T23:45:00'],
			['2020-10-01T23:45:00', '2020-10-02T00:00:00'],
		]

		self.assertEqual(expected, actual_time_ranges)

		cur_date = date_util.load_date_str('10/31/2020')
		actual_time_ranges = metrc_common_util._get_time_ranges(
			_get_date_str(cur_date), SplitTimeBy.QUARTER_HOUR)

		expected = [
			['2020-10-31T00:00:00', '2020-10-31T00:15:00'],
			['2020-10-31T00:15:00', '2020-10-31T00:30:00'],
			['2020-10-31T00:30:00', '2020-10-31T00:45:00'],
			['2020-10-31T00:45:00', '2020-10-31T01:00:00'],
			['2020-10-31T01:00:00', '2020-10-31T01:15:00'],
			['2020-10-31T01:15:00', '2020-10-31T01:30:00'],
			['2020-10-31T01:30:00', '2020-10-31T01:45:00'],
			['2020-10-31T01:45:00', '2020-10-31T02:00:00'],
			['2020-10-31T02:00:00', '2020-10-31T02:15:00'],
			['2020-10-31T02:15:00', '2020-10-31T02:30:00'],
			['2020-10-31T02:30:00', '2020-10-31T02:45:00'],
			['2020-10-31T02:45:00', '2020-10-31T03:00:00'],
			['2020-10-31T03:00:00', '2020-10-31T03:15:00'],
			['2020-10-31T03:15:00', '2020-10-31T03:30:00'],
			['2020-10-31T03:30:00', '2020-10-31T03:45:00'],
			['2020-10-31T03:45:00', '2020-10-31T04:00:00'],
			['2020-10-31T04:00:00', '2020-10-31T04:15:00'],
			['2020-10-31T04:15:00', '2020-10-31T04:30:00'],
			['2020-10-31T04:30:00', '2020-10-31T04:45:00'],
			['2020-10-31T04:45:00', '2020-10-31T05:00:00'],
			['2020-10-31T05:00:00', '2020-10-31T05:15:00'],
			['2020-10-31T05:15:00', '2020-10-31T05:30:00'],
			['2020-10-31T05:30:00', '2020-10-31T05:45:00'],
			['2020-10-31T05:45:00', '2020-10-31T06:00:00'],
			['2020-10-31T06:00:00', '2020-10-31T06:15:00'],
			['2020-10-31T06:15:00', '2020-10-31T06:30:00'],
			['2020-10-31T06:30:00', '2020-10-31T06:45:00'],
			['2020-10-31T06:45:00', '2020-10-31T07:00:00'],
			['2020-10-31T07:00:00', '2020-10-31T07:15:00'],
			['2020-10-31T07:15:00', '2020-10-31T07:30:00'],
			['2020-10-31T07:30:00', '2020-10-31T07:45:00'],
			['2020-10-31T07:45:00', '2020-10-31T08:00:00'],
			['2020-10-31T08:00:00', '2020-10-31T08:15:00'],
			['2020-10-31T08:15:00', '2020-10-31T08:30:00'],
			['2020-10-31T08:30:00', '2020-10-31T08:45:00'],
			['2020-10-31T08:45:00', '2020-10-31T09:00:00'],
			['2020-10-31T09:00:00', '2020-10-31T09:15:00'],
			['2020-10-31T09:15:00', '2020-10-31T09:30:00'],
			['2020-10-31T09:30:00', '2020-10-31T09:45:00'],
			['2020-10-31T09:45:00', '2020-10-31T10:00:00'],
			['2020-10-31T10:00:00', '2020-10-31T10:15:00'],
			['2020-10-31T10:15:00', '2020-10-31T10:30:00'],
			['2020-10-31T10:30:00', '2020-10-31T10:45:00'],
			['2020-10-31T10:45:00', '2020-10-31T11:00:00'],
			['2020-10-31T11:00:00', '2020-10-31T11:15:00'],
			['2020-10-31T11:15:00', '2020-10-31T11:30:00'],
			['2020-10-31T11:30:00', '2020-10-31T11:45:00'],
			['2020-10-31T11:45:00', '2020-10-31T12:00:00'],
			['2020-10-31T12:00:00', '2020-10-31T12:15:00'],
			['2020-10-31T12:15:00', '2020-10-31T12:30:00'],
			['2020-10-31T12:30:00', '2020-10-31T12:45:00'],
			['2020-10-31T12:45:00', '2020-10-31T13:00:00'],
			['2020-10-31T13:00:00', '2020-10-31T13:15:00'],
			['2020-10-31T13:15:00', '2020-10-31T13:30:00'],
			['2020-10-31T13:30:00', '2020-10-31T13:45:00'],
			['2020-10-31T13:45:00', '2020-10-31T14:00:00'],
			['2020-10-31T14:00:00', '2020-10-31T14:15:00'],
			['2020-10-31T14:15:00', '2020-10-31T14:30:00'],
			['2020-10-31T14:30:00', '2020-10-31T14:45:00'],
			['2020-10-31T14:45:00', '2020-10-31T15:00:00'],
			['2020-10-31T15:00:00', '2020-10-31T15:15:00'],
			['2020-10-31T15:15:00', '2020-10-31T15:30:00'],
			['2020-10-31T15:30:00', '2020-10-31T15:45:00'],
			['2020-10-31T15:45:00', '2020-10-31T16:00:00'],
			['2020-10-31T16:00:00', '2020-10-31T16:15:00'],
			['2020-10-31T16:15:00', '2020-10-31T16:30:00'],
			['2020-10-31T16:30:00', '2020-10-31T16:45:00'],
			['2020-10-31T16:45:00', '2020-10-31T17:00:00'],
			['2020-10-31T17:00:00', '2020-10-31T17:15:00'],
			['2020-10-31T17:15:00', '2020-10-31T17:30:00'],
			['2020-10-31T17:30:00', '2020-10-31T17:45:00'],
			['2020-10-31T17:45:00', '2020-10-31T18:00:00'],
			['2020-10-31T18:00:00', '2020-10-31T18:15:00'],
			['2020-10-31T18:15:00', '2020-10-31T18:30:00'],
			['2020-10-31T18:30:00', '2020-10-31T18:45:00'],
			['2020-10-31T18:45:00', '2020-10-31T19:00:00'],
			['2020-10-31T19:00:00', '2020-10-31T19:15:00'],
			['2020-10-31T19:15:00', '2020-10-31T19:30:00'],
			['2020-10-31T19:30:00', '2020-10-31T19:45:00'],
			['2020-10-31T19:45:00', '2020-10-31T20:00:00'],
			['2020-10-31T20:00:00', '2020-10-31T20:15:00'],
			['2020-10-31T20:15:00', '2020-10-31T20:30:00'],
			['2020-10-31T20:30:00', '2020-10-31T20:45:00'],
			['2020-10-31T20:45:00', '2020-10-31T21:00:00'],
			['2020-10-31T21:00:00', '2020-10-31T21:15:00'],
			['2020-10-31T21:15:00', '2020-10-31T21:30:00'],
			['2020-10-31T21:30:00', '2020-10-31T21:45:00'],
			['2020-10-31T21:45:00', '2020-10-31T22:00:00'],
			['2020-10-31T22:00:00', '2020-10-31T22:15:00'],
			['2020-10-31T22:15:00', '2020-10-31T22:30:00'],
			['2020-10-31T22:30:00', '2020-10-31T22:45:00'],
			['2020-10-31T22:45:00', '2020-10-31T23:00:00'],
			['2020-10-31T23:00:00', '2020-10-31T23:15:00'],
			['2020-10-31T23:15:00', '2020-10-31T23:30:00'],
			['2020-10-31T23:30:00', '2020-10-31T23:45:00'],
			['2020-10-31T23:45:00', '2020-11-01T00:00:00'],
		]

		self.assertEqual(expected, actual_time_ranges)

	def test_get_default_apis_to_use(self) -> None:
		self.assertEqual(dict(
			harvests=True,
			packages=True,
			plants=True,
			plant_batches=True,
			sales_receipts=True,
			transfers=True,
		), metrc_common_util.get_default_apis_to_use())
