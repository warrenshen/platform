"""
DATABASE_URL=postgres+psycopg2://postgres:postgrespassword@localhost:5432/postgres python scripts/backfill/

What:
This backfill script sets the repayment date of the loan to the last deposit date.

Why:
We are now using the deposit date to calculate repayments.
"""

import os
import sys
from os import path
from sqlalchemy.orm.attributes import flag_modified

from typing import List, cast

sys.path.append(path.realpath(path.join(path.dirname(__file__), "../../src")))
sys.path.append(path.realpath(path.join(path.dirname(__file__), "../")))


from bespoke.db import models

def main(is_test_run: bool) -> None:
    engine = models.create_engine()
    session_maker = models.new_sessionmaker(engine)
    BATCH_SIZE = 50
    is_done = False
    current_page = 0

    while not is_done:
        with models.session_scope(session_maker) as session:
            loans_batch = cast(
                List[models.Loan],
                session.query(models.Loan).filter(
                    models.Loan.is_deleted.isnot(True)
                ).offset(
                    current_page * BATCH_SIZE
                ).limit(BATCH_SIZE).all())

            if len(loans_batch) <= 0:
                is_done = True

            loan_report_id_to_loan_id = {}
            for loan in loans_batch:
                loan_report_id_to_loan_id[loan.id] = loan.loan_report_id

                transactions = cast(
                    List[models.Transaction],
                    session.query(models.Transaction).filter(
                        models.Transaction.is_deleted.isnot(True)
                    ).filter(
                        models.Transaction.loan_id == loan.id
                    ).filter(
                        models.Transaction.type == "repayment"
                    ).all())
                
                payment_ids = [transaction.payment_id for transaction in transactions]
                
                latest_repayment = cast(
                    models.Payment,
                    session.query(models.Payment).filter(
                        models.Payment.is_deleted.isnot(True)
                    ).filter(
                        models.Payment.reversed_at == None
                    ).filter(
                        models.Payment.id.in_(payment_ids)
                    ).filter(
                        models.Payment.type == "repayment"
                    ).order_by(
						models.Payment.deposit_date.desc()
					).first())
                if latest_repayment == None:
                    continue

                loan_report = cast(
                    models.LoanReport,
                    session.query(models.LoanReport).filter(
                        models.LoanReport.id == loan.loan_report_id
                    ).first())
            
                new_repayment_date = latest_repayment.deposit_date

                previous_repayment_date = loan_report.repayment_date
                if loan_report.repayment_date != None:
                    if not is_test_run:
                        loan_report.repayment_date = new_repayment_date
                    print(f"Loan ({loan.id}) with loan report id ({loan_report.id}) changed repayment date from {previous_repayment_date} to {new_repayment_date}")


            current_page += 1    

    print('SUCCESS!')

if __name__ == "__main__":
	if not os.environ.get("DATABASE_URL"):
		print("You must set 'DATABASE_URL' in the environment to use this script")
		exit(1)

	is_test_run = True

	if not os.environ.get("CONFIRM"):
		print("This script CHANGES information in the database")
		print("You must set 'CONFIRM=1' as an environment variable to actually perform database changes with this script")
	else:
		is_test_run = False

	main(is_test_run=is_test_run)
